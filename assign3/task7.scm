(define (factorial num)
    (define (iter x value)
        (if (<= x 1.0) value
            (iter (- x 1.0) (* value x))
            )
        )
    (iter num 1.0)
    )
(define (binom-coef n k)
    (/ (factorial n) (* (factorial k) (factorial (- n k))))
    )
(define (square x)
    (* x x)
    )
(define (stream-map proc s)
    (cons-stream (proc (stream-car s))
        (stream-map proc (stream-cdr s))
        )
    )

(define (euler-transform s)
    (let ((s0 (stream-car s))
        (s1 (stream-car (stream-cdr s)))
        (s2 (stream-car (stream-cdr (stream-cdr s)))))
        (define denom (+ s0 (* -2.0 s1) s2))
        (define result
            (if (= denom 0) 0.0
                (/ (square (- s2 s1)) denom)
                )
            )
        (cons-stream (- s2 result)
            (euler-transform (stream-cdr s))
            )
        )
    )

(define (mystery x)
    (define (calc-term term)
        (/ (expt x term) (factorial term))
        )
    (define (create-stream sign term)
        (cons-stream (* sign (calc-term term))
            (create-stream (* sign -1.0) (+ term 2.0))
            )
        )
    (define stream
        (cons-stream 1.0
            (create-stream -1.0 2.0)
            )
        )
    )

(define (ps-mystery x)
    (define (create-stream sum term)
        (define strm
            (cons-stream (+ sum (stream-car term))
                (create-stream (stream-car strm) (stream-cdr term))
                )
            )
        )
    (define series (mystery x))
    (define stream
        (cons-stream (stream-car series)
            (create-stream (stream-car stream) (stream-cdr series))
            )
        )
    )

(define (acc-mystery x)
    (euler-transform (ps-mystery x))
    )

(define (super-mystery x)
    (define (make-tableau transform s)
        (cons-stream s
            (make-tableau transform (transform s))
            )
        )
    (stream-map stream-car (make-tableau euler-transform (ps-mystery x)))
    )

(define (symbolic-mystery)
    (println "(mystery x) is $\\cos x$")
    )

(define (sdisplay num stream)
    (define (iter i strm)
        (if (= i num) nil
            (begin
                (print (stream-car strm))
                (print ',)
                (iter (+ i 1) (stream-cdr strm))
                )
            )
        )
    (print "(")
    (iter 0 stream)
    (print "...)")
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
        (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )
    (iter (readExpr))
    )
