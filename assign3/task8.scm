(define (cube x)
    (* x x x)
    )
(define (stream-map proc s)
    (cons-stream (proc (stream-car s))
        (stream-map proc (stream-cdr s))
        )
    )
(define (add-streams s1 s2)
    (cons-stream (+ (stream-car s1) (stream-car s2))
        (add-streams (stream-cdr s1) (stream-cdr s2))
        )
    )
(define (weighted-merge s t weight)
    (let ((sval (stream-car s))
          (tval (stream-car t)))
        (cond
            ((< (weight sval) (weight tval))
                (cons-stream sval (weighted-merge (stream-cdr s) t weight))
                )
            (else
                (cons-stream tval (weighted-merge s (stream-cdr t) weight))
                )
            )
        )
    )
(define (weighted-pairs s1 s2 weight)
    (cons-stream (list (stream-car s1) (stream-car s2))
        (weighted-merge
            (stream-map (lambda (x) (list (stream-car s1) x)) (stream-cdr s2))
            (weighted-pairs (stream-cdr s1) (stream-cdr s2) weight)
            weight
            )
        )
    )

(define (ramanujan)
    (define (find-ramanujan s)
        (let ((t (stream-cdr s)))
            (if (= (stream-car s) (stream-car t))
                (cons-stream (stream-car s)
                    (find-ramanujan (stream-cdr t))
                    )
                (find-ramanujan t)
                )
            )
        )
    (define (weight pair)
        (+ (cube (car pair)) (cube (cadr pair)))
        )
    (define ones
        (cons-stream 1 ones)
        )
    (define integers
        (cons-stream 1 (add-streams ones integers))
        )
    (define pairs (weighted-pairs integers integers weight))
    (define weights (stream-map weight pairs))
    (find-ramanujan weights)
    )

(define (sdisplay num stream)
    (define (iter i strm)
        (if (= i num) nil
            (begin
                (print (stream-car strm))
                (print ',)
                (iter (+ i 1) (stream-cdr strm))
                )
            )
        )
    (print "(")
    (iter 0 stream)
    (print "...)")
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
        (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )
    (iter (readExpr))
    )
