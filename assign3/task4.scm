(include "queue.scm")
(include "gates.scm")
(include "nand.scm")

(define the-agenda (make-agenda))

(define (inverter input output)
    (define (inverter-action-procedure)
        (nand-gate input input output)
        )
    (add-action! input inverter-action-procedure)
    )

(define (and-gate a1 a2 output)
    (define (and-action-procedure)
        (let ((nand-output (make-wire)))
            (nand-gate a1 a2 nand-output)
            (inverter nand-output output)
            )
        )
    (add-action! a1 and-action-procedure)
    (add-action! a2 and-action-procedure)
    )

(define (or-gate a1 a2 output)
    (define (or-action-procedure)
        (let ((inverted-a1 (make-wire))
              (inverted-a2 (make-wire)))
            (inverter a1 inverted-a1)
            (inverter a2 inverted-a2)
            (nand-gate inverted-a1 inverted-a2 output)
            )
        )
    (add-action! a1 or-action-procedure)
    (add-action! a2 or-action-procedure)
    )

(define (nor-gate a1 a2 output)
    (define (nor-action-procedure)
        (let ((or-output (make-wire)))
            (nor-gate a1 a2 or-output)
            (inverter or-output output)
            )
        )
    (add-action! a1 nor-action-procedure)
    (add-action! a2 nor-action-procedure)
    )

(define (xor-gate a1 a2 output)
    (define (xor-action-procedure)
        (let ((output-1 (make-wire))
              (output-2 (make-wire))
              (output-3 (make-wire)))
            (nand-gate a1 a2 output-1)
            (nand-gate a1 output-1 output-2)
            (nand-gate a2 output-1 output-3)
            (nand-gate output-2 output-3 output)
            )
        )
    (add-action! a1 xor-action-procedure)
    (add-action! a2 xor-action-procedure)
    )

(define (xnor-gate a1 a2 output)
    (define (xnor-action-procedure)
        (let ((inverted-a1 (make-wire))
              (inverted-a2 (make-wire))
              (output-1 (make-wire))
              (output-2 (make-wire)))
            (inverter a1 inverted-a1)
            (inverter a2 inverted-a2)
            (nand-gate inverted-a1 inverted=a2 output-1)
            (nand-gate a1 a2 output-2)
            (nand-gate output-1 output-2 output)
            )
        )
    (add-action! a1 xnor-action-procedure)
    (add-action! a2 xnor-action-procedure)
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
        (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )
    (iter (readExpr))
    )
