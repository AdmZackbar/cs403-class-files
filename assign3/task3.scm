(define (deque)
    (define front nil)
    (define back nil)
    (define size 0)
    (define (enqueueFront value)
        (define store (cons (cons value nil) front))
        (cond
            ((= size 0)
                (set! front store)
                (set! back store)
                )
            (else
                (set-cdr! (car front) store)    ; Set parent pointer of old front
                (set! front store)
                )
            )
        (set! size (+ size 1))
        )
    (define (enqueueBack value)
        (define store (cons (cons value nil) nil))
        (cond
            ((= size 0)
                (set! front store)
                (set! back store)
                )
            (else
                (set-cdr! back store)
                (set-cdr! (car store) back) ; Set parent pointer of new node
                (set! back store)
                )
            )
        (set! size (+ size 1))
        )
    (define (enqueueIndex index value)
        (define (iter parent i)
            (if (= i index)
                (begin
                    (define node (cons (cons value parent) (cdr parent)))
                    (set-cdr! (cadr parent) node)
                    (set-cdr! parent node)
                    (set! size (+ size 1))
                    )
                (iter (cdr parent) (+ i 1))
                )
            )
        (if (= index 0) (enqueueFront value)
            (if (= index size) (enqueueBack value)
                (iter front 1)
                )
            )
        )
    (define (dequeueFront)
        (define value (caar front))
        (set! front (cdr front))
        (set! size (- size 1))
        (if (= size 0)
            (set! back nil)
            (set-cdr! (car front) nil)
            )
        value
        )
    (define (dequeueBack)
        (define value (caar back))
        (set! back (cdr (car back)))
        (set-cdr! back nil)
        (set! size (- size 1))
        (if (= size 0) (set! front nil))
        value
        )
    (define (dequeueIndex index)
        (define (iter store i)
            (if (= i index)
                (begin
                    (set-cdr! (cadr store) (cdr (car store)))   ; Child - set parent
                    (set-cdr! (cdr (car store)) (cdr store))   ; Parent - set child
                    (set! size (- size 1))
                    (caar store)    ; Return value
                    )
                (iter (cdr (car store)) (- i 1))
                )
            )
        (if (= index 0) (dequeueFront)
            (if (= index (- size 1)) (dequeueBack)
                (iter back (- size 1))
                )
            )
        )
    (define (display)
        (define (iter x)
            (if (nil? x) nil
                (begin
                    (print (caar x))
                    (if (not (nil? (cdr x))) (print ',))
                    (iter (cdr x))
                    )
                )
            )
        (print '[)
        (iter front)
        (print '])
        )
    (define (display-backward)
        (define (iter x)
            (if (nil? x) nil
                (begin
                    (print (caar x))
                    (if (not (eq? front x)) (print ',))
                    (iter (cdr (car x)))
                    )
                )
            )
        (print '[)
        (iter back)
        (print '])
        )
    (define (peekFront)
        (caar front)
        )
    (define (peekBack)
        (caar back)
        )
    this
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
        (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )
    (iter (readExpr))
    )
