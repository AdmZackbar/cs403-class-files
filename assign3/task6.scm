(define (quad a b c step)
    (define (get-value x)
        (+ (* a x x) (* b x) c 0.0)
        )
    (define (iter x)
        (cons-stream (get-value x)
            (iter (+ x step))
            )
        )
    (define stream
        (cons-stream (get-value 0.0)
            (iter step)
            )
        )
    )

(define (integrate stream step)
    (define (get-area a b)
        (* (/ (+ a b) 2.0) step)
        )
    (define (iter prev-area prev-value value-strm)
        (define strm
            (cons-stream (+ prev-area (get-area prev-value (stream-car value-strm)))
                (iter (stream-car strm) (stream-car value-strm) (stream-cdr value-strm))
                )
            )
        )
    (cons-stream 0.0
        (iter 0.0 (stream-car stream) (stream-cdr stream))
        )
    )

(define (derivate stream step c)
    (define (get-b area a)
        (- (/ (* 2.0 area) step) a)
        )
    (define (iter prev-value prev-area area-strm)
        (define strm
            (cons-stream (get-b (- (stream-car area-strm) prev-area) prev-value)
                (iter (stream-car strm) (stream-car area-strm) (stream-cdr area-strm))
                )
            )
        )
    (define str
        (cons-stream (+ c 0.0)
            (iter (stream-car str) (stream-car stream) (stream-cdr stream))
            )
        )
    )

(define (same-stream? s1 s2 n t)
    (define (iter strm1 strm2 x)
        (if (<= x 0) #t
            (if (>= (abs (- (stream-car strm1) (stream-car strm2))) t) #f
                (iter (stream-cdr strm1) (stream-cdr strm2) (- x 1))
                )
            )
        )
    (iter s1 s2 n)
    )

(define (sdisplay num stream)
    (define (iter i strm)
        (if (= i num) nil
            (begin
                (print (stream-car strm))
                (print ',)
                (iter (+ i 1) (stream-cdr strm))
                )
            )
        )
    (print "(")
    (iter 0 stream)
    (print "...)")
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
        (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
        )
    (iter (readExpr))
    )
