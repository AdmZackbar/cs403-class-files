(define (powerSet x)
    (define (isLess a b)
        (define (findIndex item X index)
            (cond
                ((nil? item) -2)
                ((nil? X) -1)
                ((eq? item (car X)) index)
                (else (findIndex item (cdr X) (+ index 1)))
                )
            )
        (cond
            ((and (symbol? a) (symbol? b)) (< (findIndex a x 0) (findIndex b x 0)))
            ((and (list? a) (symbol? b)) #f)
            ((and (symbol? a) (list? b)) #t)
            (else
                (let ((tiebreak (- (length a) (length b))))
                    (cond
                        ((< tiebreak 0) #t)
                        ((> tiebreak 0) #f)
                        (else
                            (define (iter A B)
                                (if (nil? A) #t
                                    (if (nil? B) #f
                                        (let ((lengths (- (findIndex (car A) x 0) (findIndex (car B) x 0))))
                                            (if (< lengths 0) #t
                                                (if (> lengths 0) #f
                                                    (iter (cdr A) (cdr B))
                                                    )
                                                )
                                            )
                                        )
                                    )
                                )
                            (iter a b)
                            )
                        )
                    )
                )
            )
        )
    (define (merge A B)
        (if (nil? A) B
            (if (nil? B) A
                (if (isLess (car A) (car B))
                    (cons (car A) (merge (cdr A) B))
                    (cons (car B) (merge (cdr B) A))
                    )
                )
            )
        )
    (define (odd A)
        (if (nil? A) '()
            (if (nil? (cdr A)) (list (car A))
                (cons (car A) (odd (cddr A)))
                )
            )
        )
    (define (even A)
        (if (nil? A) '()
            (if (nil? (cdr A)) '()
                (cons (cadr A) (even (cddr A)))
                )
            )
        )
    (define (split A)
        (cons (odd A) (cons (even A) '()))
        )
    (define (iter s)
        (if (nil? s)
            (list nil)
            (let ((rest (powerSet (cdr s))))
                (merge rest
                    (map (lambda (x)
                        (merge (list (car s)) x)
                        ) rest)
                    )
                )
            )
        )
    (iter x)
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (setNilDisplay 'nil)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
    )
