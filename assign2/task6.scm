(define (powerSet x)
    (define (isLess a b)
        (if (nil? b) #f
	        (if (nil? a) #t
	            (isLess (cdr a) (cdr b))
	            )
	        )
        )
    (define (merge A B)
        (if (nil? A) B
            (if (nil? B) A
                (if (isLess (car A) (car B))
                    (cons (car A) (merge (cdr A) B))
                    (cons (car B) (merge A (cdr B)))
                    )
                )
            )
        )
    (define (iter s set)
        (if (nil? s) set
            (iter (cdr s) (merge set (map (lambda (i) (cons (car s) i)) set)))
            )
        )
    (iter (reverse x) (list nil))
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (setNilDisplay 'nil)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
    )
