(define (translate let-statement)
    (define (add-lambda assignment)
        (inspect assignment)
        (if (nil? assignment)
            (cddr let-statement)
            (list (list 'lambda (list (car (car assignment))) (add-lambda (cdr assignment))) (cadr (car assignment)))
            )
        )
    (add-lambda (cadr let-statement))
    )

(define (let*->lambdas arg)
    (list (car arg) (cadr arg) (translate (caddr arg)))
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
    )
