(define (create num)
    (lambda (function)
        (define (call-func value iter)
            (if (<= iter 0)
                value
                (call-func (function value) (- iter 1))
                )
            )
        (lambda (first)
            (call-func (function first) (- num 1))
            )
        )
    )

(define (pred church-func)
    (lambda (function)
        (define True
            (lambda (arg1)
                (lambda (arg2)
                    arg1
                    )
                )
            )
        (define False
            (lambda (arg1)
                (lambda (arg2)
                    arg2
                    )
                )
            )
        (define (If bool)
            (lambda (then-expr)
                (lambda (else-expr)
                    ((bool then-expr) else-expr)
                    )
                )
            )
        (define (make-pair arg1)
            (lambda (arg2)
                (lambda (first-or-second)
                    (((If first-or-second) arg1) arg2)
                    )
                )
            )
        (define (First pair)
            (pair True)
            )
        (define (Second pair)
            (pair False)
            )
        (lambda (first)
            (define predFirst
                ((make-pair True) first)
                )
            (define (predNext pair)
                (((If (First pair)) ((make-pair False) first)) ((make-pair False) (function (Second pair))))
                )
            (Second ((church-func predNext) predFirst))
            )
        )
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define env this)
    (define (iter expr)
         (if (not (eof?)) (begin (eval expr env) (iter (readExpr))))
         )
    (iter (readExpr))
    )
