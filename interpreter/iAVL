class Node
{
    var value, balance, height, leftHeight, rightHeight;
    var parent, left, right;

    function displayInorder()
    {
        if (left != NULL)
        {
            left.displayInorder();
            print(" ");
        }
        print(value);
        printBalance();
        print("(");
        print(parent.value);
        parent.printBalance();
        print(")");
        if (right != NULL)
        {
            print(" ");
            right.displayInorder();
        }
    }

    function printBalance()
    {
        if (balance > 0)
        {
            print("+");
        }
        else if (balance < 0)
        {
            print("-");
        }
    }

    function isLeft()
    {
        return parent.left == this;
    }
    function isRight()
    {
        return parent.right == this;
    }

    function isFavorite()
    {
        if ((isLeft() && parent.balance > 0) || (isRight() && parent.balance < 0))
        {
            //println(value, " is favorite of ", parent.value);
            return true;
        }
        //println(value, " is not favorite of ", parent.value);
        return false;
    }

    function setBalance()
    {
        if (left == NULL)
        {
            leftHeight = 0;
        }
        else
        {
            leftHeight = left.height;
        }
        if (right == NULL)
        {
            rightHeight = 0;
        }
        else
        {
            rightHeight = right.height;
        }
        if (leftHeight < rightHeight)
        {
            height = rightHeight + 1;
        }
        else
        {
            height = leftHeight + 1;
        }
        balance = leftHeight - rightHeight;
        return height;
    }

    function isLinear()
    {
        //println("In isLinear()");
        return (isLeft() && parent.isLeft()) || (isRight() && parent.isRight());
    }
    
    function getFavoriteChild()
    {
        if (balance < 0)
        {
            return right;
        }
        else if (balance > 0)
        {
            return left;
        }
        return NULL;
    }
}

class AVL
{
    var root;

    function insert(number)
    {
        var node = Node();
        node.value = number;
        node.balance = 0;
        node.height = 1;

        if (root == NULL)
        {
            root = node;
        }
        else
        {
            node = insertBinary(root, node);
            insertionFixup(node);
        }
    }

    function insertBinary(head, node)
    {
        if (head.value < node.value)
        {
            if (head.right == NULL)
            {
                head.right = node;
                node.parent = head;
                return node;
            }
            else
            {
                return insertBinary(head.right, node);
            }
        }
        else
        {
            if (head.left == NULL)
            {
                head.left = node;
                node.parent = head;
                return node;
            }
            else
            {
                return insertBinary(head.left, node);
            }
        }
    }

    function insertionFixup(x)
    {
        while (true)
        {
            if (x.parent == NULL)   // x is root
            {
                return true;
            }
            else if (x.isFavorite())      // x is favorite of parent
            {
                var y = x.getFavoriteChild();
                var p = x.parent;
                if (y != NULL && y.isLinear() == 0)
                {
                    rotate(y, x);
                    rotate(y, p);
                    x.setBalance();
                    p.setBalance();
                    y.setBalance();
                }
                else
                {
                    rotate(x, p);
                    p.setBalance();
                    x.setBalance();
                }
                return true;
            }
            else if (x.parent.balance == 0) // x's parent has no favorites
            {
                x.parent.setBalance();
                x = x.parent;
            }
            else    // x's parent favors sibling
            {
                x.parent.setBalance();
                return true;
            }
        }
    }

    function display()
    {
        if (root == NULL)
        {
            return 0;
        }
        if (root.left != NULL)
        {
            root.left.displayInorder();
            print(" ");
        }
        print("[", root.value);
        root.printBalance();
        print("]");
        if (root.right != NULL)
        {
            print(" ");
            root.right.displayInorder();
        }
        print("\n");
    }
    
    function rotate(pivot, parent)
    {
        if (pivot == parent.left)
        {
            rotateRight(pivot);
        }
        else if (pivot == parent.right)
        {
            rotateLeft(pivot);
        }
        else
        {
            println("Error in rotate, pivot not child of parent");
            exit(2);
        }
    }

    function rotateLeft(pivot)
    {
        var parent = pivot.parent;
        pivot.parent = parent.parent;
        if (parent.parent != NULL)
        {
            if (parent.isLeft())
            {
                parent.parent.left = pivot;
            }
            else if (parent.isRight())
            {
                parent.parent.right = pivot;
            }
            else
            {
                println("Error in rotation, parent is not left or right child");
                exit(3);
            }
        }
        else    // parent is root
        {
            root = pivot;
        }
        parent.parent = pivot;
        var oldLeft = pivot.left;
        pivot.left = parent;
        parent.right = oldLeft;
        if (oldLeft != NULL)
        {
            oldLeft.parent = parent;
        }
    }
    function rotateRight(pivot)
    {
        var parent = pivot.parent;
        //println("pivot value: ", pivot.value, "; parent value: ", parent.value);
        pivot.parent = parent.parent;
        if (parent.parent != NULL)
        {
            if (parent.isLeft())
            {
                parent.parent.left = pivot;
            }
            else if (parent.isRight())
            {
                parent.parent.right = pivot;
            }
            else
            {
                println("Error in rotation, parent is not left or right child");
                exit(3);
            }
        }
        else    // parent is root
        {
            root = pivot;
        }
        parent.parent = pivot;
        var oldRight = pivot.right;
        pivot.right = parent;
        parent.left = oldRight;
        if (oldRight != NULL)
        {
            oldRight.parent = parent;
        }
    }
}

main()
{
    var fp = open(args[1]);
    var tree = AVL();
    
    var command = readInt(fp), number;
    while (command != NULL)
    {
        if (command == 0)
        {
            tree.display();
        }
        else if (command == 1)
        {
            number = readInt(fp);
            tree.insert(number);
        }
        else
        {
            println("Invalid command given(", command, ")");
            return -1;
        }
        command = readInt(fp);
    }

    close(fp);
    return 0;
}
