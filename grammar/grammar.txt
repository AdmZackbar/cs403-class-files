program : classDef
        | classDef program

classDef : CLASS classHeader OBRACE optClassStatements CBRACE

classHeader : ID
            | ID EXTENDS ID

optClassStatements : classStatments
                   | EMPTY

classStatements : classStatement
                | classStatement classStatements

classStatement : accessMod VAR varList SEMICOLON
               | accessMod FUNCTION ID OPAREN optVarList CPAREN block

accessMod : PUBLIC
          | PRIVATE
          | PROTECTED
          | EMPTY

optVarList : varList
           | EMPTY

varList : varDef
        : varDef COMMA varList

varDef : ID
       | ID EQUALS expr

expr : expr2
     | expr2 EQUALS expr

expr2 : expr3
      | expr3 LOGICAL_AND expr2
      | expr3 LOGICAL_OR expr2

expr3 : expr4
      | expr4 BINARY_AND expr3
      | expr4 BINARY_OR expr3

expr4 : expr5
      | expr5 EQUALSEQUALS expr4
      | expr5 NOTEQUALS expr4
      | expr5 LESS_THAN expr4
      | expr5 GREATER_THAN expr4
      | expr5 LESS_THAN_EQUALS expr4
      | expr5 GREATER_THAN_EQUALS expr4

expr5 : expr6
      | expr6 PLUS expr5
      | expr6 MINUS expr5

expr6 : expr7
      | expr7 TIMES expr6
      | expr7 DIVIDE expr6
      | expr7 MODULUS expr6

expr7 : expr8
      | expr8 EXPONANT expr7

expr8 : unary
      | unary DOT expr8

unary : idExpr postVar
      | INTEGER
      | REAL
      | STRING
      | uop unary
      | OPAREN expr CPAREN
      | NULL
      | THIS
      | NEW ID OPAREN optExprList CPAREN
      | LAMBDA OPAREN optVarList CPAREN block

idExpr : ID
       | ID OPAREN optExprList CPAREN
       | ID OBRACKET expr CBRACKET

postVar : PLUSPLUS
       | MINUSMINUS
       | EMPTY

optExprList : exprList
            | EMPTY

exprList : expr
         | expr COMMA exprList

uop : UMINUS
    | PLUSPLUS
    | MINUSMINUS
    | NOT

block : OBRACE optStatements CBRACE

optStatements : statements
              | EMPTY

statements : statement
           | statement statements

statement : expr SEMICOLON
          | VAR varList SEMICOLON
          | IF OPAREN expr CPAREN block optElse
          | WHILE OPAREN expr CPAREN block
          | DO block WHILE OPAREN expr CPAREN SEMICOLON
          | RETURN expr SEMICOLON

optElse : elseStatement
        | EMPTY

elseStatement : ELSE block
              | ELSE IF OPAREN expr CPAREN block optElse
