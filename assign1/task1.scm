(define pi 3.14159265358979323864)
(define (round x)
    (int (+ x 0.00000001))
    )
(define (int->hex number)
    (define (iter x results)
        (cond
            ((= x 0) results)
            (else
                (iter (/ x 16) (cons (% x 16) results))
                )
            )
        )
    (iter number nil)
    )
(define (num->str x)
    (cond
        ((= x 0) "0")
        ((= x 1) "1")
        ((= x 2) "2")
        ((= x 3) "3")
        ((= x 4) "4")
        ((= x 5) "5")
        ((= x 6) "6")
        ((= x 7) "7")
        ((= x 8) "8")
        ((= x 9) "9")
        ((= x 10) "A")
        ((= x 11) "B")
        ((= x 12) "C")
        ((= x 13) "D")
        ((= x 14) "E")
        ((= x 15) "F")
        (else
            "BAD_NUMBER")
        )
    )
(define (hex->str number)
    (define (iter x result)
        (cond
            ((null? x) result)
            (else
                (iter (cdr x) (string+ result (num->str (car x))))
                )
            )
        )
    (iter number nil)
    )
(define (padHex hex)
    (define (iter x len)
        (cond
            ((<= len 0) x)
            (else
                (iter (string+ "0" x) (- len 1))
                )
            )
        )
    (iter hex (- 2 (string-length hex)))
    )

(define (cyan x)
    (round (* 255 (sin (+ (* x (/ pi 200)) (/ pi 2)))))
    )
(define (yellow x)
    (round (+ (* 255 (sin (/ (* (- 0 x) pi) 100))) 255))
    )
(define (magenta x)
    (round (+ (* 127.5 (cos (/ (* (* x 3) pi) 200))) 127.5))
    )
(define (cym x)
    (string+ "#"
        (padHex (hex->str (int->hex (cyan x))))
        (padHex (hex->str (int->hex (yellow x))))
        (padHex (hex->str (int->hex (magenta x))))
        )
    )

(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define arg (readExpr))
    (println "(cyan " arg ") is " (cyan arg))
    (println "(yellow " arg ") is " (yellow arg))
    (println "(magenta " arg ") is " (magenta arg))
    (println "(cym " arg ") is " (cym arg))
    )
